---
import AuthLayout from '@layouts/AuthLayout.astro'

const email = Astro.cookies.get('email')?.value
const password = Astro.cookies.get('password')?.value
const remember_me = !!email
---

<AuthLayout>
  <div class='p-12 bg-white mx-auto rounded-2xl w-100'>
    <div class='mb-4'>
      <h3 class='font-semibold text-2xl text-gray-800'>Login</h3>
      <p class='text-gray-500'>Please sign in to your account.</p>
    </div>
    <form class='space-y-5'>
      <div class='space-y-2'>
        <label class='text-sm font-medium text-gray-700 tracking-wide'
          >Email
          <input
            class='w-full text-base px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-green-400'
            name='email'
            value={email}
            type='email'
            placeholder='mail@gmail.com'
          />
        </label>
      </div>
      <div class='space-y-2'>
        <label class='mb-5 text-sm font-medium text-gray-700 tracking-wide'>
          Password
          <input
            class='w-full content-center text-base px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-green-400'
            name='password'
            value={password}
            type='password'
            placeholder='Enter your password'
          />
        </label>
      </div>
      <div class='flex items-center justify-between'>
        <div class='flex items-center'>
          <label
            for='remember_me'
            class='ml-2 text-sm text-gray-800 flex items-center gap-2'
          >
            <input
              id='remember_me'
              name='remember_me'
              checked={remember_me}
              type='checkbox'
              class='h-4 w-4 bg-blue-500 focus:ring-blue-400 border-gray-300 rounded'
            />
            Remember me
          </label>
        </div>
        <div class='text-sm'>
          <a href='/register' class='text-green-400 hover:text-green-500'>
            Create an account?
          </a>
        </div>
      </div>
      <div>
        <button
          class='disabled:bg-gray-300 w-full flex justify-center bg-green-400 hover:bg-green-500 text-gray-100 p-3 rounded-full tracking-wide font-semibold shadow-lg cursor-pointer transition ease-in duration-500'
          id='btn-submit'
          type='submit'
        >
          Sign in
        </button>
      </div>
      <div>
        <button
          class='disabled:bg-gray-300 w-full flex justify-center bg-red-400 hover:bg-red-500 text-gray-100 p-3 rounded-full tracking-wide font-semibold shadow-lg cursor-pointer transition ease-in duration-500'
          id='btn-google'
          type='button'
        >
          Login with Google
        </button>
      </div>
    </form>
    <div class='pt-5 text-center text-gray-400 text-xs'>
      <span>
        Copyright Â© 2022-{new Date().getFullYear()}
      </span>
    </div>
  </div>
</AuthLayout>

<script>
  import { firebase } from '@firebase/config'
  import { actions } from 'astro:actions'
  import { GoogleAuthProvider, signInWithPopup } from 'firebase/auth'
  import Swal from 'sweetalert2'

  const form = document.querySelector('form') as HTMLFormElement
  const btnSubmit = document.querySelector('#btn-submit') as HTMLButtonElement
  const btnGoogle = document.querySelector('#btn-google') as HTMLButtonElement

  form.addEventListener('submit', async (e) => {
    e.preventDefault()
    btnSubmit.setAttribute('disabled', 'true')

    const formData = new FormData(form)

    const { data, error } = await actions.login(formData)

    if (error) {
      Swal.fire({
        icon: 'error',
        title: 'Oops...',
        text: error.message,
      })
      btnSubmit.removeAttribute('disabled')
      return
    }

    window.location.replace('/protected')
  })

  btnGoogle.addEventListener('click', async (e) => {
    btnGoogle.setAttribute('disabled', 'true')
    const provider = new GoogleAuthProvider()

    try {
      // Paso 1: obtener las credenciales del lado del cliente
      const credentials = await signInWithPopup(firebase.auth, provider)

      // Paso 2: Verificar las credenciales en el backend
      const { data, error } = await actions.loginGoogle(credentials)
      if (error) {
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: error.message,
        })
        return
      }
      btnGoogle.removeAttribute('disabled')
      window.location.replace('/protected')
    } catch (error) {
      console.log(error)
    }
  })
</script>
